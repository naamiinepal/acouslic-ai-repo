_target_: src.data.base_datamodule.BaseDataModule
train_dataset:
  _target_: src.data.datasets.AcouslicPersistantDataset
  csv_file: /mnt/SSD1/safal/acouslic/data_stats/artifacts/full_paths/train_full_paths.csv
  cache_dir: cache/custom2dunetMTL
  pickle_protocol: 5
  transform:
    _target_: monai.transforms.Compose
    transforms:
      - _target_: monai.transforms.LoadImaged
        keys: ["image", "mask"]
      - _target_: monai.transforms.Resized
        keys: ["image", "mask"]
        spatial_size: [544, 736]
        mode: ["bicubic", "nearest-exact"]
      - _target_: monai.transforms.NormalizeIntensityd
        keys: ["image"]
        channel_wise: true
        subtrahend:
          _target_: numpy.array
          object:
            [
              12.011,
              17.812,
              20.948,
              22.696,
              23.792,
              24.564,
              25.135,
              25.579,
              25.951,
              26.284,
              26.6,
              26.893,
              27.173,
              27.455,
              27.739,
              28.016,
              28.267,
              28.518,
              28.763,
              28.998,
              29.249,
              29.525,
              29.812,
              30.074,
              30.311,
              30.532,
              30.727,
              30.929,
              31.14,
              31.338,
              31.523,
              31.693,
              31.83,
              31.957,
              32.098,
              32.253,
              32.413,
              32.568,
              32.711,
              32.84,
              32.974,
              33.095,
              33.232,
              33.381,
              33.53,
              33.659,
              33.748,
              33.822,
              33.875,
              33.923,
              33.961,
              33.992,
              34.016,
              34.052,
              34.097,
              34.131,
              34.14,
              34.121,
              34.109,
              34.124,
              34.119,
              34.126,
              34.137,
              34.151,
              34.17,
              34.16,
              34.132,
              34.092,
              34.026,
              33.941,
              33.856,
              33.761,
              33.663,
              33.557,
              33.456,
              33.365,
              33.268,
              33.148,
              33.014,
              32.87,
              32.709,
              32.515,
              32.322,
              32.121,
              31.945,
              31.792,
              31.626,
              31.448,
              31.252,
              31.065,
              30.857,
              30.651,
              30.43,
              30.208,
              29.993,
              29.732,
              29.465,
              29.172,
              28.831,
              28.462,
              28.104,
              27.377,
              26.773,
              26.148,
              25.474,
              24.702,
              23.745,
              22.582,
              21.141,
              19.46,
              17.525,
              15.65,
              13.88,
              12.341,
              11.059,
              9.953,
              8.967,
              8.077,
              7.341,
              6.724,
              3.122,
              2.824,
              2.561,
              2.346,
              2.17,
              2.033,
              1.945,
              1.874,
              6.215,
              5.767,
              5.326,
              4.937,
              4.553,
              4.163,
              3.804,
              3.472,
              1.78,
              1.649,
              1.527,
              1.402,
            ]
          dtype:
            _target_: numpy.dtype
            dtype: float32
        divisor:
          _target_: numpy.array
          object:
            [
              19.054,
              25.707,
              29.186,
              30.915,
              31.899,
              32.553,
              33.026,
              33.385,
              33.688,
              33.975,
              34.231,
              34.458,
              34.666,
              34.86,
              35.05,
              35.231,
              35.394,
              35.551,
              35.715,
              35.865,
              36.022,
              36.205,
              36.402,
              36.602,
              36.775,
              36.943,
              37.097,
              37.224,
              37.343,
              37.451,
              37.546,
              37.62,
              37.681,
              37.736,
              37.795,
              37.859,
              37.919,
              37.984,
              38.045,
              38.095,
              38.153,
              38.209,
              38.285,
              38.364,
              38.444,
              38.522,
              38.573,
              38.616,
              38.65,
              38.668,
              38.673,
              38.677,
              38.677,
              38.685,
              38.683,
              38.701,
              38.718,
              38.71,
              38.693,
              38.687,
              38.669,
              38.677,
              38.701,
              38.731,
              38.764,
              38.802,
              38.824,
              38.83,
              38.805,
              38.769,
              38.746,
              38.718,
              38.689,
              38.637,
              38.554,
              38.488,
              38.422,
              38.346,
              38.281,
              38.231,
              38.147,
              38.052,
              37.952,
              37.855,
              37.77,
              37.708,
              37.649,
              37.599,
              37.525,
              37.44,
              37.334,
              37.215,
              37.089,
              36.942,
              36.803,
              36.625,
              36.446,
              36.261,
              36.038,
              35.792,
              35.575,
              35.09,
              34.776,
              34.396,
              33.962,
              33.443,
              32.795,
              31.961,
              30.936,
              29.594,
              27.765,
              25.837,
              23.864,
              21.924,
              20.077,
              18.332,
              16.687,
              15.045,
              13.725,
              12.529,
              11.521,
              10.706,
              9.898,
              9.259,
              8.701,
              8.068,
              7.545,
              7.107,
              6.612,
              6.161,
              5.722,
              5.307,
              4.96,
              4.648,
              4.43,
              4.282,
              4.114,
              3.88,
              3.652,
              3.4,
            ]
          dtype:
            _target_: numpy.dtype
            dtype: float32
      - _target_: monai.transforms.ToTensord
        keys: ["image", "mask"]
val_dataset:
  _target_: src.data.datasets.AcouslicDataset
  root_dir: /mnt/Enterprise2/PUBLIC_DATASETS/acouslic-ai
  csv_file: /mnt/SSD1/safal/acouslic/data_stats/artifacts/full_paths/test_full_paths.csv
  transform:
    _target_: monai.transforms.Compose
    transforms:
      - _target_: monai.transforms.LoadImaged
        keys: ["image", "mask"]
      - _target_: monai.transforms.Resized
        keys: ["image", "mask"]
        spatial_size: [544, 736]
        mode: ["bicubic", "nearest-exact"]
      - _target_: monai.transforms.NormalizeIntensityd
        keys: ["image"]
        channel_wise: true
        subtrahend:
          _target_: numpy.array
          object:
            [
              12.011,
              17.812,
              20.948,
              22.696,
              23.792,
              24.564,
              25.135,
              25.579,
              25.951,
              26.284,
              26.6,
              26.893,
              27.173,
              27.455,
              27.739,
              28.016,
              28.267,
              28.518,
              28.763,
              28.998,
              29.249,
              29.525,
              29.812,
              30.074,
              30.311,
              30.532,
              30.727,
              30.929,
              31.14,
              31.338,
              31.523,
              31.693,
              31.83,
              31.957,
              32.098,
              32.253,
              32.413,
              32.568,
              32.711,
              32.84,
              32.974,
              33.095,
              33.232,
              33.381,
              33.53,
              33.659,
              33.748,
              33.822,
              33.875,
              33.923,
              33.961,
              33.992,
              34.016,
              34.052,
              34.097,
              34.131,
              34.14,
              34.121,
              34.109,
              34.124,
              34.119,
              34.126,
              34.137,
              34.151,
              34.17,
              34.16,
              34.132,
              34.092,
              34.026,
              33.941,
              33.856,
              33.761,
              33.663,
              33.557,
              33.456,
              33.365,
              33.268,
              33.148,
              33.014,
              32.87,
              32.709,
              32.515,
              32.322,
              32.121,
              31.945,
              31.792,
              31.626,
              31.448,
              31.252,
              31.065,
              30.857,
              30.651,
              30.43,
              30.208,
              29.993,
              29.732,
              29.465,
              29.172,
              28.831,
              28.462,
              28.104,
              27.377,
              26.773,
              26.148,
              25.474,
              24.702,
              23.745,
              22.582,
              21.141,
              19.46,
              17.525,
              15.65,
              13.88,
              12.341,
              11.059,
              9.953,
              8.967,
              8.077,
              7.341,
              6.724,
              3.122,
              2.824,
              2.561,
              2.346,
              2.17,
              2.033,
              1.945,
              1.874,
              6.215,
              5.767,
              5.326,
              4.937,
              4.553,
              4.163,
              3.804,
              3.472,
              1.78,
              1.649,
              1.527,
              1.402,
            ]
          dtype:
            _target_: numpy.dtype
            dtype: float32
        divisor:
          _target_: numpy.array
          object:
            [
              19.054,
              25.707,
              29.186,
              30.915,
              31.899,
              32.553,
              33.026,
              33.385,
              33.688,
              33.975,
              34.231,
              34.458,
              34.666,
              34.86,
              35.05,
              35.231,
              35.394,
              35.551,
              35.715,
              35.865,
              36.022,
              36.205,
              36.402,
              36.602,
              36.775,
              36.943,
              37.097,
              37.224,
              37.343,
              37.451,
              37.546,
              37.62,
              37.681,
              37.736,
              37.795,
              37.859,
              37.919,
              37.984,
              38.045,
              38.095,
              38.153,
              38.209,
              38.285,
              38.364,
              38.444,
              38.522,
              38.573,
              38.616,
              38.65,
              38.668,
              38.673,
              38.677,
              38.677,
              38.685,
              38.683,
              38.701,
              38.718,
              38.71,
              38.693,
              38.687,
              38.669,
              38.677,
              38.701,
              38.731,
              38.764,
              38.802,
              38.824,
              38.83,
              38.805,
              38.769,
              38.746,
              38.718,
              38.689,
              38.637,
              38.554,
              38.488,
              38.422,
              38.346,
              38.281,
              38.231,
              38.147,
              38.052,
              37.952,
              37.855,
              37.77,
              37.708,
              37.649,
              37.599,
              37.525,
              37.44,
              37.334,
              37.215,
              37.089,
              36.942,
              36.803,
              36.625,
              36.446,
              36.261,
              36.038,
              35.792,
              35.575,
              35.09,
              34.776,
              34.396,
              33.962,
              33.443,
              32.795,
              31.961,
              30.936,
              29.594,
              27.765,
              25.837,
              23.864,
              21.924,
              20.077,
              18.332,
              16.687,
              15.045,
              13.725,
              12.529,
              11.521,
              10.706,
              9.898,
              9.259,
              8.701,
              8.068,
              7.545,
              7.107,
              6.612,
              6.161,
              5.722,
              5.307,
              4.96,
              4.648,
              4.43,
              4.282,
              4.114,
              3.88,
              3.652,
              3.4,
            ]
          dtype:
            _target_: numpy.dtype
            dtype: float32
      - _target_: monai.transforms.ToTensord
        keys: ["image", "mask"]

batch_size: 4 # Needs to be divisible by the number of devices (e.g., if in a distributed setup)
train_val_split: [0.8, 0.2]
num_workers: 12
pin_memory: True
